import httpx
from google.auth.transport import requests
from google.oauth2 import id_token
from sqlalchemy.orm import Session
from app.core.config import settings
from app.database.models import User
from app.services.user_service import UserService


class GoogleAuthService:

    @staticmethod
    async def verify_google_token(token: str) -> dict:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è Google —Ç–æ–∫–µ–Ω–∞ (ID token –∏–ª–∏ access token)
        """
        try:
            print(f"üîç Verifying Google token (length: {len(token)})...")

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ ID token
            try:
                idinfo = id_token.verify_oauth2_token(
                    token,
                    requests.Request(),
                    settings.GOOGLE_CLIENT_ID
                )
                print("‚úÖ Successfully verified as ID token")
                return idinfo
            except ValueError as id_token_error:
                print(f"‚ö†Ô∏è Not an ID token: {str(id_token_error)}")

                # –ï—Å–ª–∏ –Ω–µ ID token, –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ access token
                print("üîÑ Trying to verify as access token...")
                return await GoogleAuthService.verify_access_token(token)

        except Exception as e:
            print(f"‚ùå Token verification failed: {str(e)}")
            raise ValueError(f"Invalid Google token: {str(e)}")

    @staticmethod
    async def verify_access_token(access_token: str) -> dict:
        """
        –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è Google access token —á–µ—Ä–µ–∑ Google API
        """
        try:
            print("üîç Verifying access token via Google API...")

            async with httpx.AsyncClient() as client:
                # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
                token_info_response = await client.get(
                    f"https://www.googleapis.com/oauth2/v1/tokeninfo?access_token={access_token}"
                )

                if token_info_response.status_code == 200:
                    token_info = token_info_response.json()
                    print(f"‚úÖ Access token info: {token_info}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏ –¥–ª—è –Ω–∞—à–µ–≥–æ client_id
                    if token_info.get('audience') != settings.GOOGLE_CLIENT_ID:
                        raise ValueError("Token audience does not match our client ID")

                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    user_info_response = await client.get(
                        "https://www.googleapis.com/oauth2/v3/userinfo",
                        headers={"Authorization": f"Bearer {access_token}"}
                    )

                    if user_info_response.status_code == 200:
                        user_info = user_info_response.json()
                        print(f"‚úÖ User info: {user_info}")

                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç, —á—Ç–æ –∏ ID token
                        return {
                            'sub': user_info.get('sub'),
                            'email': user_info.get('email'),
                            'email_verified': user_info.get('email_verified', False),
                            'name': user_info.get('name'),
                            'picture': user_info.get('picture'),
                            'given_name': user_info.get('given_name'),
                            'family_name': user_info.get('family_name'),
                            'iss': 'https://accounts.google.com',
                            'aud': settings.GOOGLE_CLIENT_ID,
                        }
                    else:
                        raise ValueError("Failed to get user info")
                else:
                    error_detail = token_info_response.json()
                    raise ValueError(f"Invalid access token: {error_detail.get('error_description', 'Unknown error')}")

        except Exception as e:
            print(f"‚ùå Access token verification failed: {str(e)}")
            raise ValueError(f"Invalid access token: {str(e)}")